version: "3.1"

services:
  app_instance_a:
    container_name: app_instance_a
    volumes:
      - ./src/logs/error.log:/home/foo/book-store/src/logs/error.log
      - ./src/logs/combined.log:/home/foo/book-store/src/logs/combined.log
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - '127.0.0.1:3000:3000'
    networks:
      - network_default
    environment:
      INSTANCE_HOST: app_instance_a
      INSTANCE_PORT: 3000
      INSTANCE: "main"
    env_file:
      - .env
    deploy:
        resources:
          limits:
            cpus: '0.25'
            memory: '1.0GB'

  app_instance_b:
    container_name: app_instance_b
    volumes:
      - ./src/logs/error.log:/home/foo/book-store/src/logs/error.log
      - ./src/logs/combined.log:/home/foo/book-store/src/logs/combined.log
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - '127.0.0.1:3001:3001'
    networks:
      - network_default
    environment:
      INSTANCE_HOST: app_instance_b
      INSTANCE_PORT: 3001
      INSTANCE: "secondary"
    env_file:
      - .env
    deploy:
        resources:
          limits:
            cpus: '0.25'
            memory: '1.0GB'

  nginx_server:
      container_name: nginx_server
      restart: always
      image: nginx
      volumes:
        - ./nginx.conf:/etc/nginx/nginx.conf:ro
      ports:
        - target: 8080
          published: 8080
          protocol: tcp
          mode: host
      networks:
        - network_default
      deploy:
        resources:
          limits:
            cpus: '0.25'
            memory: '1.0GB'

  postgres_db:
    container_name: postgres_db
    image: postgres:15
    restart: always
    environment:
      POSTGRES_DB: ${DATABASE_DB}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - ./postgresql.conf:/docker-entrypoint-initdb.d/postgresql.conf
    command: postgres -c config_file=/docker-entrypoint-initdb.d/postgresql.conf
    ports:
      - "127.0.0.1:5432:5432"
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: '1GB'
    healthcheck:
        test: ["CMD-SHELL", "pg_isready --dbname=${DATABASE_DB} --username=${DATABASE_USER}"]
        interval: 5s
        timeout: 5s
        retries: 20
        start_period: 10s
    networks:
      - network_default

networks:
  network_default:
    driver: bridge
